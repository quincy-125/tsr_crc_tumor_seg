# Â© Copyright 2020-21 Mayo Foundation for Medical Education and Research (MFMER). All rights reserved.

import os

TEMPLATE = 'import subprocess\nfrom distutils.command.build import build as _build  \nimport setuptools\nimport logging\n\n\nclass build(_build):  \n  sub_commands = _build.sub_commands + [(\'CustomCommands\', None)]\n\n\nCUSTOM_COMMANDS = REPLACE_COMMANDS_HERE\n\n\nclass CustomCommands(setuptools.Command):\n  def initialize_options(self):\n    pass\n\n  def finalize_options(self):\n    pass\n\n  def RunCustomCommand(self, command_list):\n    logging.info(f\'Running command: {command_list}\')\n    p = subprocess.Popen(\n        command_list,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT)\n    stdout_data, _ = p.communicate()\n    logging.info(stdout_data)\n    if p.returncode != 0:\n      raise RuntimeError(\n          f\'Command {command_list} failed: exit code: {p.returncode}\')\n\n  def run(self):\n    setup_pip()\n    setup_apt()\n    for command in CUSTOM_COMMANDS:\n      self.RunCustomCommand(command)\n\n\ndef setup_apt():\n  logging.info(\'Updating Debian sources.list\')\n  with open(\'/etc/apt/sources.list\', \'w\') as f:\n    f.write("""\ndeb [trusted=yes] https:// buster main\ndeb [trusted=yes] https:// buster stable\ndeb [trusted=yes] https:// buster/updates main\ndeb [trusted=yes] https:// buster-updates main\ndeb [trusted=yes] https:// gcsfuse-buster main\ndeb [trusted=yes] https:// google-compute-engine-buster-stable main\ndeb [trusted=yes] https:// google-cloud-packages-archive-keyring-buster main\n""")\n  with open(\'/etc/apt/apt.conf.d/99timeout\', \'w\') as f:\n    f.write("""\nAcquire::http::Timeout "600";\nAcquire::ftp::Timeout "600";    \n    """\n    )\n  logging.info(\'Debian sources.list has been updated\')\n\ndef setup_pip():\n  logging.info(\'Updating pip.conf\')\n  with open(\'/etc/pip.conf\', \'w\') as pip_conf:\n    # Set /etc/pip.conf\n    pip_conf.write("""\n[global]\nindex-url = https://\n""")\n  logging.info(\'pip.conf has been updated\')\n\n\nsetuptools.setup(\n    name=\'beam_image_stitch\',\n    version=\'0.0.1\',\n    description=\'Beam image stitch.\',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        \'build\': build,\n        \'CustomCommands\': CustomCommands,\n    })'

def _generate_commands()-> str:
    '''
    Generates a list of apt-get and pip install commands to be executed in the Dataflow workers. 
    The commands are generated based on the contents of two files, 'deb-dependencies.txt' 
    and 'dependencies.txt' (neither needs to be present). The first file should list the names of 
    debian packages that need to be installed (each in its own line), and the second file is 
    obtained by running `pip freeze`.
    '''
    basic_deb = ['apt-get', '--assume-yes', 'install']
    basic_pip = ['pip3', 'install']
    commands = [['apt-get', 'update'],
                ['pip3', 'install', '--upgrade', 'pip']]
    
    if os.path.exists('deb-requirements.txt'):
        print('deb-requirements.txt file found, apt-get install commands will be generated')
        with open('deb-requirements.txt', 'r') as debs:
            for deb in debs:
                if deb.strip() != '':
                    commands.append(basic_deb + [deb.strip()])
    if os.path.exists('requirements.txt'):
        print('requirements.txt file found, pip-install commands will be generated')
        with open('requirements.txt', 'r') as pips:
            for pip in pips:
                if pip.strip() != '':
                    commands.append(basic_pip + [pip.strip()])    

    return commands

def _write_setup(generator, template: str):
    '''
    Adds the list of commands generated by a generator function to a 
    template and writes these modified contents to the file 'setup.py' to be used 
    for a Dataflow job
    '''

    commands = str(generator())
    complete_file = template.replace('REPLACE_COMMANDS_HERE', commands)
    with open('setup.py','w') as file:
        file.write(complete_file)
        

def generate_setup():
    _write_setup(_generate_commands, TEMPLATE)
    
if __name__ == "__main__":
    generate_setup()